<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>客户端 on 风舞的 BLOG</title>
    <link>https://blog.gsgtzq.com/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
    <description>Recent content in 客户端 on 风舞的 BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jul 2019 09:41:26 +0800</lastBuildDate><atom:link href="https://blog.gsgtzq.com/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅谈终端技术的未来</title>
      <link>https://blog.gsgtzq.com/post/feature-of-terminal-technology/</link>
      <pubDate>Wed, 10 Jul 2019 09:41:26 +0800</pubDate>
      
      <guid>https://blog.gsgtzq.com/post/feature-of-terminal-technology/</guid>
      <description>前言 终端，最初的定义是最简单的个人计算机，而现在的终端，早已不是单台单一的计算机，交互方式也不再停留于键盘，鼠标，显示器。但是无论怎么变化，终端始终都是人与机器交互的方式。
终端技术演进到今日，演变出了无数种交互方式，随之的技术方案也是千变万化，以下就来聊一聊终端技术的过去、未来、演变的过程，以及最近的一些思考和个人见解。
一切始于交互 终端终究是人与计算机的虚拟世界交互的一种方式。
最早之时，人们使用键盘做为输入设备，使用文字命令模式与计算机进行交互。
20 世纪 90 年代开始，以 Windows、苹果操作系统为首的图形界面时代来临，GUI 对普通用户的极大有好性大大降低了普通用户使用计算机的门槛。
互联网时代，浏览器成为了获取信息的主要途径，从早期几乎如同文章一样的网页，到今日纷繁复杂的 Web Application。直到今日，网页这种形式承担了大量普通用户的交互需求。
随着移动设备的普及，硬件成本、带宽成本一再降低，从纯原生 App 时代，到如今小程序等各种跨平台兼容性解决方案，移动端也演变出了自己的一套章法。
回头再看如今的 PC，也随着移动端的蓬勃发展，演变出了不少新鲜玩意儿：Electron、Desktop PWA，也在 PC 领域占有了一席之地。
但这些说到头，这些技术都是人与数字世界的一种方式。简单些概括就是：人-&amp;gt;硬件输入设备-&amp;gt;系统平台-&amp;gt;数字世界。
不完美的交互体验 直到今日，这些交互方式以及解决方案数不胜数，但都有自己不尽完美的地方，有硬件设备的变迁引入的新的交互问题，也有平台争端引发的麻烦。硬件变迁自然不用多说，从最古老的交互方式键盘，到如今的手机屏幕、VR 设备等，变化多样且复杂。而我们主要來谈一谈主流平台之间的一些争端。
绕不过的平台之争 Windows 与 Mac “上古”时代，Windows 和苹果操作系统占据了 PC 桌面市场绝大部分的份额，两家的 GUI 类库各有所不同。在 Windows 下，是以 C++语言为基础的 MFC，而苹果操作系统则是以 Objective-C 为基础构建的 Cocoa。苹果操作系统的操作体验，在很长一段时间都是压过 Windows 的，但是市场占有率远不及 Windows。随时代变化，MFC 出现了越来越多的问题（开发者的痛苦，效果不够与时俱进），因此在这之后，微软还为 Windows 先后开发了 WPF 和 UWP，效果已经与 Cocoa 不相上下。
**桌面时代两家的争端，以及早期跨平台技术的缺失，导致桌面平台的主流做法是独占式开发，仅适配某一个平台。**这也直接导致了大量软件没法在不同的操作系统中通用。微软在桌面平台对开发者更友好的做法，也是微软统治桌面市场的一大原因。
后来在Java JWT，Qt等技术带队之下，桌面端也出现了一些跨平台方案，但这些方案更多会在嵌入式平台兼容上有所考虑，在那个时代，普通桌面应用都比较少。
浏览器的标准 互联网时代，浏览器占据了用户大部分的交互时间，但争端仍在继续。微软凭借 PC 时代的优势捆绑 IE，一举拿下大部分浏览器市场，垄断带来的最大的问题就是标准问题。VBScript 与 JavaScript，不一样的盒子模型，旧版本浏览器表现不一致，各浏览器缠上新特性实现进度不同等问题一直都摆在 Web 开发者的面前。但与纯桌面时代不同的是，Web 开发的跨平台兼容性要求一直被放在一个非常高的标准线上，这也是早期的前端工程师的一项重要技能。
Android 与 iOS 移动互联网时代，Android 与 iOS 很快席卷了市场。苹果将 Cocoa 进行触摸操作改进，编写大量组件后形成了 Cocoa Touch。Android 则是有 Java 语言和自己的标准。很长一段时间两端原生 App 的开发如火如荼。两家不仅在技术实现上完全不同，在用户交互上也有非常多不同的理解，早期 iOS 的体验上很大程度上远优于 Android ，Android 早期也没有成型的交互规范，因此 UI 设计很多都直接使用 iOS 的设计规范，至于 Android 就照 iOS 的来吧。这对 Android 开发者来讲，绝不是一个好消息，早期的 Android 开发者不知写了多少个与仿 iOS 效果的“轮子”。谷歌后来推出了 Material Design，并在 Android 中主推，但并没有特别流行起来，而在这之前，很多在双端平台崛起的公司已然形成了自己一套跨平台的规范，双端交互上高度趋同，Material Design 在规范层面来的有些晚。</description>
    </item>
    
  </channel>
</rss>
